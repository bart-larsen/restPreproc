#!/usr/bin/env bash
set -ex

#
#
# USAGE: 
#   REDO=1 SUBJECT=10845 VISIT=20100924 rest_preproc_torque
#   qsub rest_preproc_torque -v SUBJECT=10845,REDO=1,VISIT=20100924
# 
#
#  depends
#     * rewardrest.cfg      set file locations
#     * makerestimage.bash  pull/make rest images, 
#                           get FS parcilation (extract NBT, errod)
#                           warp stuct to MNI
#  expect
#     * defined: $SUBJECT 
#     * defined: $VISIT
#     * exists:  $FSDir/$SUBJECT/mri/aseg.mgz brainmask.mgz T1.mgz
#     * exists:  ${subjRootDir}/$SUBJECT/rest/all.nii.gz
#     * exists:  $(dirname $0)/preprocessMprage 
#  optional
#     * define: TASK, defaults to reward (in common.src.bash)
#     * define: REDO, to remove old before starting again
#     * define: VERSION, to change output dir suffix
#     * define: NOPHYSIO, to not use physio
#
# FINAL OUTPUT:
#  rest_preproc_native
#  rest_preproc_mni
#
#2013-08-15
#  use common.src.bash, add TASK parameter
#2013-08-08
# no physio option via env variable
#2013-08-07
# abstract with makerestimage.bash and rewardrest.cfg
#
#2013-07-16
#  add VISIT and VERSION,
#  change physio directory (see /data/Luna1/Raw/Physio/processing/physio_matlab )
#  3drefit after flirt broken, need FSLOUTPUTTYPE
#  prettied some white space
#
#2013-06-28
#  do not take input arguments. require SUBJECT be in the environment
#
#2013-06-28
# update FSDIR to _AP for to match aarthi's
#    this change does not effect processing pipeline
#
#2013-06-24
# add version suffix
# add preprocess.info 
# get scriptdir for rest_preprocessMprage absolute director

#06/12/2012 Aarthi
# redoing preprocess to make the alignment better. using FLIRT to align EPI to mprage. 

#12-08-2011
#preprocess rest functinal
#normalize to MNI brain
#added afni's anaticor method to remove local nuisance signals
#convert to bash

#'Mapping sources of correlation in resting state FMRI, with 
# artifact detection and removal'
#       Jo, et al., Neuroimage, Vol 52 (2), 571-582, 2010.
#       [http://dx.doi.org/10.1016/j.neuroimage.2010.04.246]

scriptdir=$(cd $(dirname $0);pwd)              
[[ $scriptdir =~ spool ]] && scriptdir="/home/foranw/src/restPreproc"

# get add3dNote and printInfo, also set up some env vars (FSL export type=nii.gz)
source $scriptdir/common.src.bash
# additionally sources configuration
#FSDir:        what dir has free surfer aseg.mgz
#subjRootDir:  same as restdir, where subject directories "lunaid_date" are
#dicomRootDir: where the subject "lunaid_date" raw dcms are
#s:            subjuect, probably always "${SUBJECT}_${VISIT}"
#origepi       location of (or where to put) the origianl epi (e.g. rest+orig.HEAD)
#physioDir:    physio
#physiofile:   RetroTS file if it exists

# directory suffix for different versions of processing
preprocversion="$VERSION"
[ -z "$preprocversion" ] && preprocversion="preproc_torque"


# check that we have anatomic image, or die
# and if we don't have a rest.nii.gz, make one
source $scriptdir/makerestimage.bash


#physiofile=$(find /data/Luna1/Reward/KaiPhysio/ -iname "$SUBJECT*RetroTS*.1D"|tail -n1)
# if we want nophysio, undefine the physio file
[ -n "$NOPHYSIO" ] && unset physiofile
echo $physiofile
#  if physiofile's not define or doesn't exists, change the proc directory and warn if this is unexpected
if ! [ -n "$physiofile" -a -f "$physiofile" ]; then
  preprocversion="${preprocversion}_nophysio"
  [ -z "$NOPHYSIO" ] && echo "NO PHYSIO! in $physioDir/$SUBJECT/$VISIT/"
fi





### Start preprocessing


cd ${subjRootDir}/${s}/

#### exit with sucess if we've already run and have the last file
if [ -z "$REDO" -a -r $preprocversion/rest_preproc_mni.nii.gz ]; then
  echo "to REDO use: REDO=1 $0 $@ " 
  echo "${subjRootDir}/${s}/$preprocversion completed $(sed -n '2p;2q' $preprocversion/processing.info)"
  3dNotes $preprocversion/rest_preproc_mni.nii.gz
  exit 0
fi

#### clean up previous 
# remove if we want to redo
[ -n "$REDO" -a -r $preprocversion ] && rm -r $preprocversion
[ -r $preprocversion ] && echo "${subjRootDir}/${s}/$preprocversion already exists!\nuse: REDO=1 $0 $@ " && exit 1

mkdir $preprocversion


# pull in anatomical stuff, so it's in the same directory
#ln -s ${subjRootDir}/${s}/anat/{mprage,aseg,warpcoef}* ${subjRootDir}/${s}/$preprocversion/
ln -s ${subjRootDir}/${s}/anat/* ${subjRootDir}/${s}/$preprocversion/

#
# Step 1. Create nuisance regressors from Freesurfer segementation
#
#
#
# 1.1 Orient and extract masks
#
#

cd ${subjRootDir}/${s}/$preprocversion/
# print script info (func defined in common.src.bash)
printInfo > processing.info

#CANNOT DEOBLIQUE BECAUSE it changes number of slices which messes up the physio stuff. 
#3dWarp -deoblique -prefix rest_epi_RPI_do rest_epi_RPI+orig



##
# make func match anantomical; put in RPI as afni BRIK/HEAD
##
3dcopy $origepi ./rest_epi
3dresample -orient RPI -prefix rest_epi_RPI -inset rest_epi+orig


#
# Step 2. Preprocessing functional rest data
#

#
# preprocess with physio dat,run AFNI's automatic preprocess script. Regress out physio, WM and ventrical noise	
#
if [ -n "$physiofile" -a -f $physiofile ]; then
   echo "USING PHYSIO!!" | tee physio.txt
   afni_proc.py -bash -execute -out_dir afni_proc -scr_overwrite -subj_id ${s} -dsets rest_epi_RPI+orig -blocks tshift volreg mask scale regress -do_block despike ricor -ricor_regs  $physiofile -ricor_regress_method 'per-run' -tshift_opts_ts -tpattern seq+z -mask_apply epi -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD -GOFORIT 10

#
# preprocess without physiodata
#
else
   echo "NOT NOT NOT USING PHYSIO!!" | tee nophysio.txt
   afni_proc.py -bash -execute -out_dir afni_proc -scr_overwrite -subj_id ${s} -dsets rest_epi_RPI+orig -blocks tshift volreg mask scale regress -do_block despike -regress_motion_per_run -tshift_opts_ts -tpattern seq+z -mask_apply epi -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD -GOFORIT 10	

fi

# put the output of afni_proc in our working director
ln -s afni_proc/errts.${s}+orig* .
ln -s afni_proc/dfile_rall.1D .

#demean motion		
1d_tool.py -infile dfile_rall.1D -set_nruns 1 -demean -write motion_demean.1D

#align errts functional to structural using FSL (flirt)
#decided to use DOF 6 because it is the most conservative (assumes EPI and mprage are the same size). went with trilinear interpolation
#(default) because its faster. sinc is supposed to be the best, but it takes forever!!

# convert anat brain, epi, regressed brain, and the mask to nifti for fsl
3dAFNItoNIFTI mprage_bet_RPI+orig 
3dAFNItoNIFTI rest_epi_RPI+orig 
3dAFNItoNIFTI errts.${s}+orig
3dAFNItoNIFTI afni_proc/full_mask.${s}+orig

# get a skull stripped mean functional to use for aligning epi2struct
fslmaths rest_epi_RPI -Tmean func_mean	
bet func_mean func_mean_bet

# align mean func to struct and to get a transform matrix
# use matrix to align
#    mask to structural using nearestneighbor interpolation		
#    leftovers of regression to structural

flirt -v -in func_mean_bet     -ref mprage_bet_RPI.nii -omat epi2brain.txt -paddingsize 0.0 -dof 6           -o func2brain_errts.nii.gz
flirt -v -in errts.${s}.nii.gz -ref mprage_bet_RPI.nii -init epi2brain.txt -paddingsize 0.0 -dof 6 -applyxfm -o rest_epi_RPI_errts_al.nii.gz 	
flirt -v -in full_mask.${s}    -ref mprage_bet_RPI.nii -init epi2brain.txt -paddingsize 0.0 -dof 6 -applyxfm -interp nearestneighbour -o mask_al.nii.gz

# add a note to the aligned errts about this
add3dNote errts.${s}.nii.gz rest_epi_RPI_errts_al.nii.gz  \
  "flirt -v -in errts.${s}.nii.gz -ref mprage_bet_RPI.nii -init epi2brain.txt -paddingsize 0.0 -dof 6 -applyxfm -o rest_epi_RPI_errts_al.nii.gz"

# sometimes fsl doesn't listen
# actually make .nii.gz if we haven't  -- 3dcopy fails to write block 199 for errts??
#for nii in  func2brain_errts.nii rest_epi_RPI_errts_al.nii mask_al.nii; do
# [ -r $nii ] && 3dcopy $nii{,.gz}
#done

#FSL strips away the TR. Bring it back!	
3drefit -TR 1.500 rest_epi_RPI_errts_al.nii*

#convert aligned EPI to AFNI, nii.gz on rest_epi b/c adding TR saved it as .nii.gz
3dcopy rest_epi_RPI_errts_al.nii.gz rest_epi_RPI_errts_al+orig
3dcopy mask_al.nii* mask_al+orig
rm rest_epi_RPI_errts_al.nii*

#resample aligned errts to 3.125 x 3.125 x 4
3dresample -dxyz 3.125 3.125 4 -inset rest_epi_RPI_errts_al+orig -prefix rest_epi_RPI_errts_al_res


#resample masks to EPI
3dresample -prefix Vent_res     -master rest_epi_RPI_errts_al_res+orig -inset Vent+orig     
3dresample -prefix WM_erod_res  -master rest_epi_RPI_errts_al_res+orig -inset WM_erod+orig  
3dresample -prefix NBT_erod_res -master rest_epi_RPI_errts_al_res+orig -inset NBT_erod+orig 
3dresample -prefix aseg_RPI_res -master rest_epi_RPI_errts_al_res+orig -inset aseg_RPI+orig 
3dresample -prefix mask_al_res  -master rest_epi_RPI_errts_al_res+orig -inset mask_al+orig  

#extract regressors from FSL masks for use as nuisance regressors
3dmaskave -mask Vent_res+orig     -q rest_epi_RPI_errts_al_res+orig > Vent.1D
3dmaskave -mask WM_erod_res+orig  -q rest_epi_RPI_errts_al_res+orig > WM.1D
3dmaskave -mask NBT_erod_res+orig -q rest_epi_RPI_errts_al_res+orig > NBT.1D

# regress for every graymatter -- regessor for each voxel
# local white matter regressors, better than global WM regessor
@ANATICOR -prefix errts_anaticor \
          -ts rest_epi_RPI_errts_al_res+orig \
          -motion motion_demean.1D -polort 3 \
          -aseg aseg_RPI_res+orig -radius 30 \
          -nuisance NBT.1D \
          -no_ventricles \
          -Rsq_WMe -coverage -verb

#bandpass filter to remove drfiting and physio signal
3dBandpass    -prefix resid_bp 0.009 0.08 errts_anaticor+orig
3dAFNItoNIFTI -prefix resid_bp.nii.gz -float resid_bp+orig
rm resid_bp+orig*


#Smooth only within GM mask - only for Kai's stuff, not Aarthi's
#3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask GM_L_res_al+orig -preserve -prefix resid_bp_blh.nii.gz
#3dBlurInMask -input resid_bp_blh.nii.gz -FWHM 5 -mask GM_R_res_al+orig -preserve -prefix resid_bp_b.nii.gz
#3dcalc -a GM_R_res_al+orig -b GM_L_res_al+orig -expr 'a+b' -prefix GM_mask.nii.gz

#Smooth within whole mask. 
3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask mask_al_res+orig -preserve -prefix resid_bp_b.nii.gz

3dcopy resid_bp_b.nii.gz rest_preproc_native.nii.gz 
# rest_preproc_native.nii.gz is the preprocess file in native space

rm resid_bp_b.nii.gz




#
# Step 3. normalize mprage to 2mm mni template - going to skip for now because MNI space isn't a priority
#


#rename oriented to RPI mprages to what they were called originally so michael's script can recognize them. the orginals are now renamed to "originalorientation"
3dcopy mprage.nii.gz     mprage_originalorientation.nii.gz
3dcopy mprage_bet.nii.gz mprage_originalorientation_bet.nii.gz

3dAFNItoNIFTI -prefix mprage.nii.gz     mprage_RPI+orig
3dAFNItoNIFTI -prefix mprage_bet.nii.gz mprage_bet_RPI+orig	

#rm mprage.nii.gz
#rm mprage_bet.nii.gz		

# Step 4. Warp into mni space
 
##
## Micheal's script is run by makerestimage.bash, warp matrix should already exist
##

#3dAFNItoNIFTI -prefix all.nii.gz rest_epi_RPI_al+orig 

#fslmaths all_bet -Tmean func_mean
#bet func_mean func_bet
#flirt -in func_bet -ref mprage_bet -out func_to_mprage -omat func_to_mprage.mat -dof 6

applywarp -i rest_preproc_native -r ~/standard/fsl_mni152/MNI152_T1_2mm.nii.gz -o rest_preproc_mni -w mprage_warpcoef	
# add notes for this command
add3dNote rest_preproc_native.nii.gz rest_preproc_mni.nii* \
  "applywarp -i rest_preproc_native -r ~/standard/fsl_mni152/MNI152_T1_2mm.nii.gz -o rest_preproc_mni -w mprage_warpcoef"

# in case we dont have gunzip compression, compress with afni (instead of gzip)
[ -r rest_preproc_mni.nii ] && 3dcopy rest_preproc_mni.nii rest_preproc_mni.nii.gz
#rm all_bet.nii.gz		
# rest_preproc_mni is the functional file in MNI space
