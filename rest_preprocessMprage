#!/bin/bash
function printHelp() {

cat <<EndOfHelp
----------------------------------------------
processMprage is a shell script that preprocesses axial mprage structural scans.

It is intended to be run within an mprage directory containing raw data (or a
  nifti of the raw data if you use the -n option).

The basic pipeline is:
  1) Convert dicom files to NIFTI
  2) Brain extract the structural image
  3) Warp structural to standard stereotactic space using affine (linear)
       transformation: flirt. (Used only for warp coefficients)
  4) Warp structural image to stereotactic space using nonlinear transformation
       with fnirt. Affine coefficients from the linear warping are used as
       starting values (helps optimization). In the case of MNI, uses FSL's
       config file with optimal parameters for fnirt. In the case of Talairach,
       use a custom settings file adapted from FSL's MNI configuration.

Command line options:
  -b: bet options. Passes value to fsl bet (brain extraction).
        Must be quoted (e.g., -b "-f 0.7"). Defaults to "-R -f 0.5 -v"
  -d: delete or archive DICOM files. Options are -d n ("no": leaves DICOM
        untouched), -d y ("yes": deletes DICOM files), -d a ("archive":
        compresses files into archive file: mprage_dicom.tar.gz. If not
        passed, user will be prompted for action.
  -h: print command help
  -n: skip DICOM conversion and start with specified NIFTI file. 
        Example: -n mprage.nii.gz (will complete bet, flirt, and
        fnirt, but skip dcm2nii).
  -o: output file name. The filename for the final warped mprage image.
        Defaults to mprage_nonlinear_warp_<referenceName>.nii.gz
  -p: file pattern for dicom MR files. Defaults to "MR*". Please enclose the pattern in quotes or it may not function properly
  -r: reference brain. Currently supports "Talairach_2mm" and "MNI_2mm". Default is "Talairach_2mm".


Example call: processMprage -r MNI_2mm -b "-R -f 0.5 -g 0.2" -d a -o mprage_final.nii.gz
----------------------------------------------
EndOfHelp

} #end of printHelp

#Author: Michael Hallquist
#Written: 5/2/2010
#Last updated: 5/25/2010
#
#Kai modified for his rest study 8/2/2010


#dicom convert
#to3d 

set -e #exit if any error occurs (stop processing)

#set defaults for dicomPattern, reference, betOpts, and outputFile
dicomPattern="MR*"
reference="MNI_2mm"
betOpts="-R -f 0.5 -v" #default bet options

#handle command line parameters
while getopts b:d:hn:o:p:r: option
do
    case "$option" in
	b) betOpts=$OPTARG ;;
	d) delDicom=$OPTARG ;;
	h) printHelp; exit 0 ;;
	p) dicomPattern=$OPTARG ;;
	n) nifti=$OPTARG ;;
	o) outputFile=$OPTARG ;;
	r) reference=$OPTARG ;;
	*) echo -e "Unrecognized option: -$OPTARG\n"
    esac
done

#old settings prior to non-skull-stripped fnirt
#bettedRefBrain=$HOME/standard/Talairach_2mm.nii.gz

case "$reference" in
    Talairach_2mm)  bettedRefBrain=$HOME/standard/Tal_MNI152_T1_2mm_brain.nii.gz;
	unbettedRefBrain=$HOME/standard/Tal_MNI152_T1_2mm.nii.gz;
	fnirtConfig=$HOME/standard/fnirtTalairachSettings.cnf ;;
    MNI_2mm) bettedRefBrain=$HOME/standard/fsl_mni152/MNI152_T1_2mm_brain.nii;
	unbettedRefBrain=$HOME/standard/fsl_mni152/MNI152_T1_2mm.nii;
	fnirtConfig=${FSLDIR}/etc/flirtsch/T1_2_MNI152_2mm.cnf ;;
    *) echo -e "Reference brain not recognized. Options are Talairach_2mm and MNI_2mm. Defaulting to Talairach_2mm.\n"; reference="Talairach_2mm";
	bettedRefBrain=$HOME/standard/Tal_MNI152_T1_2mm_brain.nii.gz;
	unbettedRefBrain=$HOME/standard/Tal_MNI152_T1_2mm.nii.gz; 
	fnirtConfig=$HOME/standard/fnirtTalairachSettings.cnf ;;
esac

if [ ! -f $bettedRefBrain ]; then
    echo -e "Skull stripped reference brain not found: $bettedRefBrain\n"
    exit 1
fi

#if unbetted reference is set, but file does not exist, throw error
if [ ! -f $unbettedRefBrain ]; then
    echo -e "Reference brain not found: $unbettedRefBrain\n"
    exit 1
fi

#check for the fnirt config file
if [ ! -f $fnirtConfig ]; then
    echo -e "FNIRT config file not found: $fnirtConfig\n"
    exit 1
fi

#if nifti passed in (i.e., skip dicom to nifti, then verify its existence
if [[ -n $nifti && ! -f $nifti ]]; then
    echo -e "Instructed to start preprocessing with nifti (-n), but file not found.\nFile:${nifti}\n"
    exit 1
fi

#if nifti undefined, assume the dicoms need to be converted
if [ -z $nifti ]; then
    ##############
    #convert dicom files to NIFTI
    echo "----------------"
    echo "Converting DICOM files to NIFTI"
    echo "----------------"

    #check whether files exist
    #numFiles=$( ls | grep "$dicomPattern"  | wc -l )
    numFiles=$( ls $dicomPattern | wc -l )
    if [ $numFiles -eq 0 ]; then
	echo "No DICOM files found using pattern: $dicomPattern. If you have already converted DICOM to NIFTI and want to skip this step, pass in the unbetted structural image using the -n parameter. Example: processMprage -n mprage.nii.gz"
	exit 1
    fi

    sleep 1
    dcm2nii ${dicomPattern}

    #Ask user what to do with original DICOM files unless passed on command line

    if [ -z $delDicom ]; then
	until [[ "$delDicom" = [AaNnYy] ]]; do
	    read -sn1 -p "Delete or archive original DICOM files? (y/n/a)" delDicom
	done
    fi

    case ${delDicom} in
	y|Y) echo -e "\nDeleting DICOM files"; rm ${dicomPattern} ;;
	n|N) echo -e "\nKeeping DICOM files" ;;
	a|A) echo -e "\nArchiving DICOM files (mprage_dicom.tar.gz)"; tar czf mprage_dicom.tar.gz ${dicomPattern} && rm ${dicomPattern} ;;
    esac
    sleep 1

    #dcm2nii makes a file with a funky name. Rename to mprage
    nifti="mprage.nii.gz" #used in bet step.
    numNifti=$( ls *.nii.gz | wc -l )
    if [ $numNifti -gt 1 ]; then
      if [ -f o*.nii.gz ]; then
        mv o*.nii.gz $nifti
        echo "Using oriented nifti output from dcm2nii"
      else
        echo "Multiple nifti files present in mprage directory. Cannot determine correct target."
        exit 1
      fi
    else
      mv *.nii.gz $nifti
    fi

    
fi

#this won't work if the filename contains a period (no worries for now)
niftiBase=$( echo $nifti | cut -d . -f 1 )

#need to set default after processing options and dicom import
#to account for reference choice and filename
if [ -z $outputFile ]; then outputFile=${niftiBase}_nonlinear_warp_${reference}; fi


###############
#brain extract
#append _bet to whatever is passed in for nifti
#echo "----------------"
#echo "Running brain extraction"
#echo "bet ${niftiBase} ${niftiBase}_bet.nii.gz ${betOpts}"
#echo "----------------"
#sleep 1

#bet ${niftiBase} ${niftiBase}_bet ${betOpts}

##############
#warp structural to Stereotaxic space (MNI or Talairach)
#first conduct affine (linear) warping to get linear warp coefficients
#note that flirt works with betted reference brain, but fnirt prefers unbetted
flirtAffCoef="${niftiBase}_to_${reference}_affine.mat"

echo "----------------"
echo -e "Running affine (linear) warp to extract warp coefficients"
echo -e "flirt -in ${niftiBase}_bet -ref $bettedRefBrain -omat ${flirtAffCoef} -v"
echo "----------------"
sleep 1

flirt -in ${niftiBase}_bet -ref $bettedRefBrain -omat ${flirtAffCoef} -v

#omitting flirt parameter -out, which creates a linearly-warped brain.
#We only need the coefficients for fnirt, created by -omat
#see here: http://www.fmrib.ox.ac.uk/fsl/fnirt/index.html
#-out mprage_tlrc_affine

###############
#now nonlinear warp
#note that Robert's original mprage2tlrc_nonlinear script used the betted brain,
#but the documentation suggests using the non-bet brain.

echo "----------------"
echo "Running nonlinear transformation to warp mprage to: ${reference}"
echo -e "fnirt --ref=$unbettedRefBrain --in=${niftiBase} --aff=$flirtAffCoef --iout=$outputFile --config=$fnirtConfig --logout=${niftiBase}_to_${reference}_fnirt_settings.log -v"
echo "----------------"
sleep 1

fnirt --ref=$unbettedRefBrain --in=${niftiBase} --aff=$flirtAffCoef --iout=$outputFile --config=$fnirtConfig --logout=${niftiBase}_to_${reference}_fnirt_settings.log -v
