#!/usr/bin/env bash
set -ex

#
#
# USAGE: rest_preproc_v6_scott 10152
#
#  expect
#     $FSDir/10152/mri/aseg.mgz brainmask.mgz T1.mgz
#     ${subjRootDir}/10152/rest/all.nii.gz
#
#  use REDOMPRAGE to redo mprage
#
# FINAL OUTPUT:
#  rest_preproc_native
#  rest_preproc_mni
#
#2013-06-24
# add version suffix
# add preprocess.info to mprage and mri dir 
# move corrected py to /opt/ni_tools/afni/align_epi_anat_lncdfix.py 
# get scriptdir for rest_preprocessMprage
# add catch to skip mprage if already done
# dfile.rall.1D is now saved as dfile_rall.1D by afni, make change

#06/12/2012 Aarthi
# redoing preprocess to make the alignment better. using FLIRT to align EPI to mprage. 

#12-08-2011
#preprocess rest functinal
#normalize to MNI brain
#added afni's anaticor method to remove local nuisance signals
#convert to bash

#'Mapping sources of correlation in resting state FMRI, with 
# artifact detection and removal'
#       Jo, et al., Neuroimage, Vol 52 (2), 571-582, 2010.
#       [http://dx.doi.org/10.1016/j.neuroimage.2010.04.246]

#the first argument to the script is expected to be a subject ID
s=$1
# if it wasn't provided, just use 1-152
[ -z "$s" ] && s=10152 && echo "using 10152 by default!" 

# find the first date in this script, call that the script version
scriptver=$(perl -lne 'print&&exit if /#\d{4}/' $0)  
scriptdir=$(cd $(dirname $0);pwd)              # absolute path to this script, used to reference rest_preprocessMprage
subjRootDir="/Volumes/Phillips/Rest/Subjects"  # expect after this dir there is subj/rest/all.nii.gz
physioDir="/Volumes/Phillips/Rest/physio1D"    # if this doesn't exist, it won't be used
FSDir="/Volumes/Phillips/Rest/FS_Subjects"     # what dir has free surfer aseg.mgz
mprageversion="_v6Scott"                       # directory suffix for different versions of mprage
preprocversion="_Scott"                        # directory suffix for different versions of processing

for file in $FSDir/${s}/mri/aseg.mgz ${subjRootDir}/${s}/rest/all.nii.gz; do
 [ ! -r $file ] && echo "need $file! cannot read it" && exit 1
done


### Structural stuff

if [ ! -d ${subjRootDir}/${s}/mni$preprocversion/  -o -n "$REDOMPRAGE" ]; then


   #
   # Step 1. Create nuisance regressors from Freesurfer segementation
   #
   
   cd ${subjRootDir}/${s}/
   
   # clean up previous outputs, make mprage folder
   [ -r mni$preprocversion ] && rm -rf mni$preprocversion
   mkdir mni$preprocversion
   date > mni$preprocversion/processing.info
   echo "script: $0; $scriptdir; $scriptver">> mni$preprocversion/processing.info
   cd $FSDir/${s}/mri

   # move freesurfer segmentation files to mrpage folder
   mri_convert brainmask.mgz mprage_bet.nii.gz
   
   mri_convert T1.mgz mprage.nii.gz
   
   mv mprage_bet.nii.gz ${subjRootDir}/${s}/mni$preprocversion/
   
   mv mprage.nii.gz ${subjRootDir}/${s}/mni$preprocversion/
   
   mri_convert aseg.mgz aseg.nii.gz
   
   mv aseg.nii.gz ${subjRootDir}/${s}/mni$preprocversion/
   
   cd ${subjRootDir}/${s}/mni$preprocversion/
   
   #CANNOT DEOBLIQUE BECAUSE it changes number of slices which messes up the physio stuff. 
   #3dWarp -deoblique -prefix rest_epi_RPI_do rest_epi_RPI+orig
   
   
   3dcopy ${subjRootDir}/${s}/rest/all.nii.gz ./rest_epi
   
   # switch to RPI orientation for both func and anat files
   3dresample -orient RPI -prefix rest_epi_RPI -inset rest_epi+orig
   
   3dcopy mprage_bet.nii.gz mprage_bet
   3dresample -orient RPI -prefix mprage_bet_RPI -inset mprage_bet+orig
   
   3dcopy mprage.nii.gz mprage
   3dresample -orient RPI -prefix mprage_RPI -inset mprage+orig
   
   3dcopy aseg.nii.gz aseg
   3dresample -orient RPI -prefix aseg_RPI -inset aseg+orig
   
   # create WM, Ventricals, Non-brain-tissue(NBT) and GM masks
   
   3dcalc -a aseg_RPI+orig -expr 'amongst(a,2,7,41,46,77,78,79)' -prefix WM
   3dcalc -a aseg_RPI+orig -expr 'amongst(a,4,5,14,15,43,44)' -prefix Vent
   3dcalc -a aseg_RPI+orig -expr 'amongst(a,3,8,10,11,12,13,17,18,26,28)' -prefix GM_L
   3dcalc -a aseg_RPI+orig -expr 'amongst(a,42,47,49,50,51,52,53,54,58,60)' -prefix GM_R
   3dcalc -a aseg_RPI+orig -expr 'amongst(a,16)' -prefix BS
   3dcalc -a mprage_bet_RPI+orig -b WM+orig -c Vent+orig -d GM_L+orig -e GM_R+orig -f BS+orig -expr '(a/a)-(b+c+d+e+f)' -prefix NBT
   
   # erode masks by 1 voxel to reduce partial volume effect 
   3dcalc -a WM+orig -b a+i -c a-i -d a+j -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))' -prefix WM_erod
   
   # after some test dont erode Ventrical masks, as no voxels will survive
   #3dcalc -a Vent+orig -b a+i -c a-i -d a+j -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))' -prefix Vent_erod
   
   3dcalc -a NBT+orig -b a+i -c a-i -d a+j -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))' -prefix NBT_erod
   
   #AFNI SUCKS FOR ALIGNMENT DONT USE
   #align_epi_anat.py -anat brain_bet_RPI+orig -epi rest_epi_RPI_do+orig -epi_strip None -epi_base 5 -anat2epi -anat_has_skull no -tshift off -child_anat mprage_RPI+orig aseg_RPI+orig GM_L_res+orig GM_R_res+orig brain_bet_RPI_res+orig WM_res_erod+orig Vent_res+orig NBT_res_erod+orig
   
   #align masks to functional - NO NEED SINCE I FOLLOWED MICHAEL'S ADVICE TO ALIGN FUNCTIONAL TO STRUCTURAL
   #3dAFNItoNIFTI WM_erod+orig
   #flirt -in WM_erod.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o WM_erod_al.nii.gz
   
   #3dAFNItoNIFTI Vent+orig
   #flirt -in Vent.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o Vent_al.nii.gz
   
   #3dAFNItoNIFTI GM_R+orig
   #flirt -in GM_R.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o GM_R_al.nii.gz
   
   #3dAFNItoNIFTI GM_L+orig
   #flirt -in GM_L.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o GM_L_al.nii.gz
   
   #3dAFNItoNIFTI NBT_erod+orig
   #flirt -in NBT_erod.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o NBT_erod_al.nii.gz
   
   #3dAFNItoNIFTI aseg_RPI+orig
   #flirt -in aseg_RPI.nii -ref rest_epi_RPI.nii.gz -init brain2epi.txt -applyxfm -o aseg_al.nii.gz

fi

#
# Step 2. Preprocessing functional rest data

#
# preprocess with physio dat,run AFNI's automatic preprocess script. Regress out physio, WM and ventrical noise	
#
if [ -f /Volumes/Phillips/Rest/physio1D/${s}_RetroTS.slibase.1D ]; then
afni_proc.py -bash -execute -out_dir afni_proc -scr_overwrite -subj_id ${s} -dsets rest_epi_RPI+orig -blocks tshift volreg mask scale regress -do_block despike ricor -ricor_regs  /Volumes/Phillips/Rest/physio1D/${s}_RetroTS.slibase.1D -ricor_regress_method 'per-run' -tshift_opts_ts -tpattern seq+z -mask_apply epi -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD -GOFORIT 10

#
# preprocess without physiodata
#
else
afni_proc.py -bash -execute -out_dir afni_proc -scr_overwrite -subj_id ${s} -dsets rest_epi_RPI+orig -blocks tshift volreg mask scale regress -do_block despike -regress_motion_per_run -tshift_opts_ts -tpattern seq+z -mask_apply epi -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD -GOFORIT 10	

fi

cp afni_proc/errts.${s}+orig* .

cp afni_proc/dfile_rall.1D .

#demean motion		
1d_tool.py -infile dfile_rall.1D -set_nruns 1 -demean -write motion_demean.1D

#align errts functional to structural using FSL (flirt)
#decided to use DOF 6 because it is the most conservative (assumes EPI and mprage are the same size). went with trilinear interpolation
#(default) because its faster. sinc is supposed to be the best, but it takes forever!!

3dAFNItoNIFTI mprage_bet_RPI+orig 
3dAFNItoNIFTI rest_epi_RPI+orig 
3dAFNItoNIFTI errts.${s}+orig
#convert mask to nifti
3dAFNItoNIFTI afni_proc/full_mask.${s}+orig

fslmaths rest_epi_RPI -Tmean func_mean	
bet func_mean func_mean_bet	
flirt -v -in func_mean_bet -ref mprage_bet_RPI.nii -omat epi2brain.txt -paddingsize 0.0 -dof 6 -o func2brain_errts.nii.gz
flirt -v -in errts.${s}.nii.gz -ref mprage_bet_RPI.nii -init epi2brain.txt -applyxfm -paddingsize 0.0 -dof 6 -o rest_epi_RPI_errts_al.nii.gz 	

#align mask to structural using nearestneighbor interpolation		
flirt -v -in full_mask.${s} -ref mprage_bet_RPI.nii -init epi2brain.txt -applyxfm -interp nearestneighbour -paddingsize 0.0 -dof 6 -o mask_al.nii.gz

#FSL strips away the TR. Bring it back!	
3drefit -TR 1.500 rest_epi_RPI_errts_al.nii.gz

#convert aligned EPI to AFNI
3dcopy rest_epi_RPI_errts_al.nii.gz rest_epi_RPI_errts_al+orig
3dcopy mask_al.nii.gz mask_al+orig
rm rest_epi_RPI_errts_al.nii.gz

#resample aligned errts to 3.125 x 3.125 x 4
3dresample -dxyz 3.125 3.125 4 -inset rest_epi_RPI_errts_al+orig -prefix rest_epi_RPI_errts_al_res


#resample masks to EPI
3dresample -master rest_epi_RPI_errts_al_res+orig -inset Vent+orig -prefix Vent_res
3dresample -master rest_epi_RPI_errts_al_res+orig -inset WM_erod+orig -prefix WM_erod_res
3dresample -master rest_epi_RPI_errts_al_res+orig -inset NBT_erod+orig -prefix NBT_erod_res
3dresample -master rest_epi_RPI_errts_al_res+orig -inset aseg_RPI+orig -prefix aseg_RPI_res
3dresample -master rest_epi_RPI_errts_al_res+orig -inset mask_al+orig -prefix mask_al_res

#extract regressors from FSL masks for use as nuisance regressors
3dmaskave -mask Vent_res+orig -q rest_epi_RPI_errts_al_res+orig > Vent.1D
3dmaskave -mask WM_erod_res+orig -q rest_epi_RPI_errts_al_res+orig > WM.1D
3dmaskave -mask NBT_erod_res+orig -q rest_epi_RPI_errts_al_res+orig > NBT.1D

@ANATICOR -ts rest_epi_RPI_errts_al_res+orig -motion motion_demean.1D -polort 3 -aseg aseg_RPI_res+orig -prefix errts_anaticor -radius 30 -nuisance NBT.1D -no_ventricles -Rsq_WMe -coverage -verb

#bandpass filter to remove drfiting and physio signal
3dBandpass -prefix resid_bp 0.009 0.08 errts_anaticor+orig
3dAFNItoNIFTI -float -prefix resid_bp.nii.gz resid_bp+orig
rm resid_bp+orig*


#Smooth only within GM mask - only for Kai's stuff, not Aarthi's
#3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask GM_L_res_al+orig -preserve -prefix resid_bp_blh.nii.gz
#3dBlurInMask -input resid_bp_blh.nii.gz -FWHM 5 -mask GM_R_res_al+orig -preserve -prefix resid_bp_b.nii.gz
#3dcalc -a GM_R_res_al+orig -b GM_L_res_al+orig -expr 'a+b' -prefix GM_mask.nii.gz

#Smooth within whole mask. 
3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask mask_al_res+orig -preserve -prefix resid_bp_b.nii.gz

3dcopy resid_bp_b.nii.gz rest_preproc_native.nii.gz 
# rest_preproc_native.nii.gz is the preprocess file in native space

rm resid_bp_b.nii.gz




# Step 3. normalize mprage to 2mm mni template - going to skip for now because MNI space isn't a priority
#



#rename oriented to RPI mprages to what they were called originally so michael's script can recognize them. the orginals are now renamed to "originalorientation"
3dcopy mprage.nii.gz mprage_originalorientation.nii.gz
3dcopy mprage_bet.nii.gz mprage_originalorientation_bet.nii.gz
rm mprage.nii.gz
rm mprage_bet.nii.gz		
3dAFNItoNIFTI -prefix mprage.nii.gz mprage_RPI+orig
3dAFNItoNIFTI -prefix mprage_bet.nii.gz mprage_bet_RPI+orig	

#run michael's normalization script 	
source ../../../rest_scripts/rest_preprocessMprage -r MNI_2mm -n mprage.nii.gz -d n


# Step 4. Warp into mni space
#
#3dAFNItoNIFTI -prefix all.nii.gz rest_epi_RPI_al+orig 

#fslmaths all_bet -Tmean func_mean
#bet func_mean func_bet
#flirt -in func_bet -ref mprage_bet -out func_to_mprage -omat func_to_mprage.mat -dof 6

applywarp -i rest_preproc_native -r ~/standard/fsl_mni152/MNI152_T1_2mm.nii.gz -o rest_preproc_mni -w mprage_warpcoef	

		#rm all_bet.nii.gz		
		# rest_preproc_mni is the functional file in MNI space
		
		

	



