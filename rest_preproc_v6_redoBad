#!/bin/bash

#Will   08/06/2012 - setting pipeline to "bad" bandpass, regress for comparison
#Aarthi 06/12/2012 - redoing preprocess to make the alignment better. using FLIRT to align EPI to mprage. 

#preprocess rest functinal
#normalize to MNI brain
#added afni's anaticor method to remove local nuisance signals
#convert to bash
#12-08-2011

#'Mapping sources of correlation in resting state FMRI, with 
# artifact detection and removal'
#       Jo, et al., Neuroimage, Vol 52 (2), 571-582, 2010.
#       [http://dx.doi.org/10.1016/j.neuroimage.2010.04.246]


set -ex
cwd=$(pwd)
[ -n "$1" -a -d "$1" ] && cwd=$1

physo=no       # uses phsyo data: no, with|yes 
pipetype=first # which pipeline: simul, first, last

[ -z "$fresh" ] && fresh=no  # pulls fresh from freesurfer, same as again=mprage
[ -z "$again" ] && again=    # do this part of the pipeline again: mprage, afni|phys, bp
                             

# yes should be "with"
[ "$physo" = "yes" ] && physo="with"

prefix=pipeTests
mprageDirSuffix=nuisanceRegressors
preprocDirSuffix=preproc_${physo}Physo
pipelineSuffix="BP${pipetype}_${physo}Physo"

function alert { 
  echo "** $@ **"
}
#for s in $(ls -d 1*); do
for s in /Volumes/Serena/Rest/Subjects/10767; do

       #subjdir=${cwd}/$s
       subjdir=$s
          subj=$(basename $s)
     mprageDir=$subjdir/$prefix/$mprageDirSuffix
    preprocDir=$subjdir/$prefix/$preprocDirSuffix
      pipeline=$subjdir/$prefix/$pipelineSuffix

      alert "SUBJ: $subj"
    #
    # Step 1. Create nuisance regressors from Freesurfer segementation
    [[ $again =~ "mprage" ]] && fresh="yes"

    if [ ! -d $mprageDir -o "$fresh" = "yes" ] ; then 
		
       alert "starting mprage ($mprageDir)"
		
       # clean up previous outputs, make mprage folder
       [ -d  $mprageDir ] && rm -rf $mprageDir
       mkdir -p $mprageDir

       # go to FS parcilations
       cd /Volumes/Serena/Rest/FS_Subjects_AP/${subj}/mri

       # convert mgz to nii if havne't already
       [ ! -r mprage.nii.gz     ] && mri_convert T1.mgz        mprage.nii.gz
       [ ! -r mprage_bet.nii.gz ] && mri_convert brainmask.mgz mprage_bet.nii.gz
       [ ! -r aseg.nii.gz       ] && mri_convert aseg.mgz      aseg.nii.gz
		
       # move freesurfer segmentation files to working directory
       mv {mprage_bet,mprage,aseg}.nii.gz $mprageDir/

       # go into working directory
       cd $mprageDir/

       #CANNOT DEOBLIQUE BECAUSE it changes number of slices which messes up the physio stuff. 
       #3dWarp -deoblique -prefix rest_epi_RPI_do rest_epi_RPI+orig
       
       
       # make AFNI formated inputs
       3dcopy mprage.nii.gz     mprage
       3dcopy aseg.nii.gz       aseg
       3dcopy mprage_bet.nii.gz mprage_bet
       3dcopy ${subjdir}/rest/all.nii.gz ./rest_epi

       # switch to RPI orientation for both func and anat files
       for image in mprage mprage_bet aseg rest_epi; do 
          3dresample -orient RPI -prefix ${image}_RPI   -inset ${image}+orig
       done
       #3dresample -orient RPI -prefix mprage_RPI     -inset mprage+orig
       #3dresample -orient RPI -prefix mprage_bet_RPI -inset mprage_bet+orig
       #3dresample -orient RPI -prefix aseg_RPI       -inset aseg+orig
       #3dresample -orient RPI -prefix rest_epi_RPI   -inset rest_epi+orig

       
       # create WM, Ventricals, Non-brain-tissue(NBT) and GM masks
       
       3dcalc -a aseg_RPI+orig -expr 'amongst(a,2,7,41,46,77,78,79)'            -prefix WM
       3dcalc -a aseg_RPI+orig -expr 'amongst(a,4,5,14,15,43,44)'               -prefix Vent
       3dcalc -a aseg_RPI+orig -expr 'amongst(a,3,8,10,11,12,13,17,18,26,28)'   -prefix GM_L
       3dcalc -a aseg_RPI+orig -expr 'amongst(a,42,47,49,50,51,52,53,54,58,60)' -prefix GM_R
       3dcalc -a aseg_RPI+orig -expr 'amongst(a,16)' -prefix BS
       3dcalc -a mprage_bet_RPI+orig -b WM+orig -c Vent+orig -d GM_L+orig \
              -e GM_R+orig -f BS+orig -expr '(a/a)-(b+c+d+e+f)'                 -prefix NBT
       
       # erode masks by 1 voxel to reduce partial volume effect 
       3dcalc -a WM+orig -b a+i -c a-i -d a+j \
              -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))'         -prefix WM_erod
       
       # after some test dont erode Ventrical masks, as no voxels will survive
       #3dcalc -a Vent+orig -b a+i -c a-i -d a+j \
       #       -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))'        -prefix Vent_erod
       
       3dcalc -a NBT+orig -b a+i -c a-i -d a+j \
              -e a-j -f a+k -g a-k -expr 'a*(1-amongst(0,b,c,d,e,f,g))'         -prefix NBT_erod

       # also make nifti copies
       3dAFNItoNIFTI mprage_bet_RPI+orig 
       3dAFNItoNIFTI rest_epi_RPI+orig 
    fi      
       

    cd $subjdir/$prefix/

    # need to do everything on from this point again
    [[ $again =~ afni|phsy ]] && fresh="yes"

    #
    # Step 2. Preprocessing functional rest data
    if [ ! -d $preprocDir -o "$fresh" = "yes" ]; then


       alert "starting preproc ($preprocDir)"

       [ -d $preprocDir ] && rm -r $preprocDir
       #
       # preprocess with physio dat,run AFNI's automatic preprocess script. Regress out physio, WM and ventrical noise	
       #
       if [ -f /Volumes/Serena/Rest/physio1D/${subj}_RetroTS.slibase.1D -a "$physo" = "with" ]; then
          afni_proc.py -bash -execute -out_dir $preprocDir -scr_overwrite -subj_id ${subj} \
                       -dsets $mprageDir/rest_epi_RPI+orig \
                       -blocks tshift volreg mask scale regress \
                       -do_block despike ricor \
                       -ricor_regs  /Volumes/Serena/Rest/physio1D/${subj}_RetroTS.slibase.1D \
                       -ricor_regress_method 'per-run' \
                       -tshift_opts_ts -tpattern seq+z -mask_apply epi \
                       -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD \
                       -GOFORIT 10
          
       #
       # preprocess without physiodata
       #
       else
          # TODO: use global mean if no physo
          afni_proc.py -bash -execute -out_dir $preprocDir -scr_overwrite -subj_id ${subj} \
                       -dsets $mprageDir/rest_epi_RPI+orig \
                       -blocks tshift volreg mask scale regress \
                       -do_block despike \
                       -regress_motion_per_run \
                       -tshift_opts_ts -tpattern seq+z -mask_apply epi \
                       -regress_errts_prefix errts -regress_no_motion -regress_opts_3dD \
                       -GOFORIT 10	
          
       fi

       cd  $preprocDir

       # demean motion		
       1d_tool.py -infile dfile.rall.1D -set_nruns 1 -demean -write motion_demean.1D

       # conver to nifti
       3dAFNItoNIFTI errts.${subj}+orig
       3dAFNItoNIFTI full_mask.${subj}+orig



       # align errts functional to structural using FSL (flirt)
       # decided to use DOF 6 because it is the most conservative (assumes EPI and mprage are the same size). went with trilinear interpolation
       # (default) because its faster. sinc is supposed to be the best, but it takes forever!!

       
       # get the average funcataional and strip the skull
       fslmaths $mprageDir/rest_epi_RPI -Tmean func_mean	
       bet func_mean func_mean_bet	

       # align epi to T1
       flirt -v -in func_mean_bet -ref $mprageDir/mprage_bet_RPI.nii -omat epi2brain.txt \
                 -paddingsize 0.0 -dof 6 -o func2brain_errts.nii.gz

       # use prev to align afni out to T1
       flirt -v -in $preprocDir/errts.${subj}.nii.gz -ref $mprageDir/mprage_bet_RPI.nii -init epi2brain.txt -applyxfm \
                -paddingsize 0.0 -dof 6 -o rest_epi_RPI_errts_al.nii.gz 	


       # align mask to structural using nearestneighbor interpolation		
       flirt -v -in $preprocDir/full_mask.${subj}    -ref $mprageDir/mprage_bet_RPI.nii -init epi2brain.txt -applyxfm \
                -paddingsize 0.0 -dof 6 -interp nearestneighbour -o mask_al.nii.gz
       
       # FSL strips away the TR. Bring it back!	
       3drefit -TR 1.500 rest_epi_RPI_errts_al.nii.gz

       # convert aligned EPI to AFNI
       3dcopy rest_epi_RPI_errts_al.nii.gz rest_epi_RPI_errts_al+orig
       3dcopy mask_al.nii.gz mask_al+orig
       rm rest_epi_RPI_errts_al.nii.gz
       
       # resample aligned errts to 3.125 x 3.125 x 4
       # functional resolution?
       3dresample -dxyz 3.125 3.125 4 -inset rest_epi_RPI_errts_al+orig -prefix rest_epi_RPI_errts_al_res
    fi
    
    ######################################################

    

    ######## pipeline specific

    # need to redo everything on from this point on?
    [[ $again =~ "bp" ]] && fresh="yes"


    if [ ! -d $pipeline -o "$fresh" = "yes" ]; then 

       alert "starting pipeline ($pipeline)"

       [ -d $pipeline ] && rm -r $pipeline
       mkdir -p $pipeline 
       cd $pipeline
       pwd

       
       # extract regressors 
       for regress in Vent WM_erod NBT_erod aseg_RPI mask_al; do
          # resample masks to EPI
          # Vent+orig    -> Vent_res+orig
          # WM+orig      -> WM_res+orig
          # NBT_erod+orig-> NBT_erod_res+orig
          # aseg_RPI+orig-> aseg_RPI_res+orig
          # mask_al+orig -> mask_al_res+orig

          # most things are in mprage folder, mask_al is in preproc
          srcdir=$mprageDir
          [[ $regress =~ mask_al ]] && srcdir=$preprocDir

          3dresample -master $preprocDir/rest_epi_RPI_errts_al_res+orig \
                     -inset  $srcdir/$regress+orig                      \
                     -prefix $pipeline/${regress}_res


          # all done with  mask and aseg
          [[ $regress =~ aseg|mask_al ]] && continue

          ## extract regressors from FSL masks for use as nuisance regressors
          # Vent_res+orig    -> Vent.1D
          # WM_erod_res+orig -> WM.1D
          # NBT_erod_res+org -> NBT.1D
          3dmaskave -mask ${regress}_res+orig \
                    -q $preprocDir/rest_epi_RPI_errts_al_res+orig \
                    > ${regress%_erod*}.1D


       done

       if [ $pipe = "first" ]; then 
          #bandpass filter to remove drfiting and physio signal
          3dBandpass -prefix resid_bp 0.009 0.08 errts_anaticor+orig
          3dAFNItoNIFTI -float -prefix resid_bp.nii.gz resid_bp+orig
          rm resid_bp+orig*
       fi

       # clean with residual time series (ts is despiked and time shifted)
       @ANATICOR -ts $preprocDir/rest_epi_RPI_errts_al_res+orig            \
                 -motion $preprocDir/motion_demean.1D -polort 3         \
                 -aseg aseg_RPI_res+orig -prefix errts_anaticor -radius 30 \
                 -nuisance NBT.1D -no_ventricles -Rsq_WMe -coverage -verb
       


       if [ $pipe = "last" ]; then 
          #bandpass filter to remove drfiting and physio signal
          3dBandpass -prefix resid_bp 0.009 0.08 errts_anaticor+orig
          3dAFNItoNIFTI -float -prefix resid_bp.nii.gz resid_bp+orig
          rm resid_bp+orig*
       fi

       
       #Smooth only within GM mask - only for Kai's stuff, not Aarthi's
       #3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask GM_L_res_al+orig -preserve -prefix resid_bp_blh.nii.gz
       #3dBlurInMask -input resid_bp_blh.nii.gz -FWHM 5 -mask GM_R_res_al+orig -preserve -prefix resid_bp_b.nii.gz
       #3dcalc -a GM_R_res_al+orig -b GM_L_res_al+orig -expr 'a+b' -prefix GM_mask.nii.gz
       
       #Smooth within whole mask. 
       3dBlurInMask -input resid_bp.nii.gz -FWHM 5 -mask mask_al_res+orig -preserve -prefix resid_bp_b.nii.gz
       
       3dcopy resid_bp_b.nii.gz rest_preproc_native.nii.gz 
       # rest_preproc_native.nii.gz is the preprocess file in native space
       
       rm resid_bp_b.nii.gz
    
    fi

    exit

    # Step 3. normalize mprage to 2mm mni template - going to skip for now because MNI space isn't a priority
    #
    [[ $again =~ normal|reg ]] && fresh="yes"



    #rename oriented to RPI mprages to what they were called originally so michael's script can recognize them. the orginals are now renamed to "originalorientation"
    3dcopy mprage.nii.gz mprage_originalorientation.nii.gz
    3dcopy mprage_bet.nii.gz mprage_originalorientation_bet.nii.gz
    rm mprage.nii.gz
    rm mprage_bet.nii.gz		
    3dAFNItoNIFTI -prefix mprage.nii.gz mprage_RPI+orig
    3dAFNItoNIFTI -prefix mprage_bet.nii.gz mprage_bet_RPI+orig	

    #run michael's normalization script 	
    source ../../../rest_scripts/rest_preprocessMprage -r MNI_2mm -n mprage.nii.gz -d n
    

    # Step 4. Warp into mni space
    #
    #3dAFNItoNIFTI -prefix all.nii.gz rest_epi_RPI_al+orig 
    
    #fslmaths all_bet -Tmean func_mean
    #bet func_mean func_bet
    #flirt -in func_bet -ref mprage_bet -out func_to_mprage -omat func_to_mprage.mat -dof 6
    
    applywarp -i rest_preproc_native -r ~/standard/fsl_mni152/MNI152_T1_2mm.nii.gz -o rest_preproc_mni -w mprage_warpcoef	
    
    #rm all_bet.nii.gz		
    # rest_preproc_mni is the functional file in MNI space
    
    


    cd ${cwd}
done



